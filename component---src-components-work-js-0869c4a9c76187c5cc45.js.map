{"version":3,"sources":["webpack:///./src/components/Work.js"],"names":["pageQuery","Work","pageContext","work","data","site","siteMetadata","title","slug","source","link","preview","description","subtitle","useState","loading","setLoading","seo","className","leftCol","style","styleHidden","src","asset","alt","onLoad","width","height","to","count","href"],"mappings":"+QAiFaA,EAAS,YAQPC,UA9EF,SAAC,GAOP,IANLC,EAMI,EANJA,YAOQC,GADJ,EALJC,KACEC,KACEC,aAIaJ,EAATC,MACAI,EAA8DJ,EAA9DI,MAAOC,EAAuDL,EAAvDK,KAAYC,GAA2CN,EAAjDO,KAAiDP,EAA3CM,QAAQE,EAAmCR,EAAnCQ,QAASC,EAA0BT,EAA1BS,YAAaC,EAAaV,EAAbU,SAFrD,EAG0BC,oBAAS,GAAhCC,EAHH,KAGYC,EAHZ,KAKJ,OACE,kBAAC,IAAD,CAAQC,IAAK,CAAEV,QAAOK,gBACpB,kBAAC,IAAD,CACEM,UAAU,cACVC,QAAS,WACP,OACE,oCACE,wBAAID,UAAU,iBACXX,GAEH,uBAAGW,UAAU,oBACVL,OAMX,kBAAC,IAAD,CAASK,UAAU,+BACjB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAEXH,GAAW,kBAAC,IAAD,CAAUG,UAAU,0BAEjC,yBACEA,UAAU,eACVE,MAAOL,EAAUM,IAAc,IAE/B,kBAAC,IAAD,CACEC,IAAKC,YAAMZ,GACXa,IAAKjB,EACLW,UAAU,sBACVO,OAAQ,kBAAMT,GAAW,MAE3B,yBAAKE,UAAU,yBACb,kBAAC,IAAD,CAAQQ,MAAM,KAAKC,OAAO,KAAKT,UAAU,wBAE3C,kBAAC,IAAD,CAAMU,GAAE,cAAgBpB,EAAhB,WAAgCU,UAAU,yBAGtD,yBAAKA,UAAU,eACb,wBAAIA,UAAU,QAAQH,EAAU,kBAAC,IAAD,MAAeR,GAC/C,uBAAGW,UAAU,QAAQH,EAAU,kBAAC,IAAD,CAAUc,MAAO,EAAGH,MAAM,QAAWd,GAElEG,EACI,kBAAC,IAAD,CAAUY,OAAO,OAAOD,MAAM,UAE9B,uBAAGI,KAAMrB,EAAQS,UAAU,sCACzB,kBAAC,IAAD,CAAQA,UAAU,YAAYQ,MAAM,KAAKC,OAAO,OADlD","file":"component---src-components-work-js-0869c4a9c76187c5cc45.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Layout from \"./Layout\";\r\nimport Hero from \"./Hero\";\r\nimport Content from \"./Content\"\r\nimport { asset, styleHidden } from '../util/util';\r\nimport { Link } from 'gatsby';\r\nimport { graphql } from 'gatsby';\r\nimport Skeleton from \"./Skeleton\";\r\nimport LazyImage from \"./LazyImage\";\r\nimport { ZoomIn, Github } from \"./icons\";\r\n\r\nconst Work = ({\r\n  pageContext,\r\n  data: {\r\n    site: {\r\n      siteMetadata\r\n    }\r\n  }\r\n}) => {\r\n  const { work } = pageContext;\r\n  const { title, slug, link, source, preview, description, subtitle } = work;\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  return (\r\n    <Layout seo={{ title, description }}>\r\n      <Hero\r\n        className=\"hero--small\"\r\n        leftCol={() => {\r\n          return (\r\n            <>\r\n              <h2 className=\"hero__heading\">\r\n                {title}\r\n              </h2>\r\n              <p className=\"hero__subheading\">\r\n                {subtitle}\r\n              </p>\r\n            </>\r\n          )\r\n        }}\r\n      />\r\n      <Content className=\"section section--after-hero\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-8\">\r\n            {\r\n              loading && <Skeleton className=\"skeleton-card-preview\" />\r\n            }\r\n            <div\r\n              className=\"work-preview\"\r\n              style={loading ? styleHidden : {}}\r\n            >\r\n              <LazyImage\r\n                src={asset(preview)}\r\n                alt={title}\r\n                className=\"work-preview__image\"\r\n                onLoad={() => setLoading(false)}\r\n              />\r\n              <div className=\"work-preview__overlay\">\r\n                <ZoomIn width=\"81\" height=\"81\" className=\"work-preview__zoom\" />\r\n              </div>\r\n              <Link to={`/templates/${slug}/preview`} className=\"work-preview__link\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"col pl-md-5\">\r\n            <h2 className=\"mb-3\">{loading ? <Skeleton /> : title}</h2>\r\n            <p className=\"mb-3\">{loading ? <Skeleton count={2} width=\"70%\" /> : description}</p>\r\n            {\r\n              loading\r\n                ? <Skeleton height=\"54px\" width=\"120px\" />\r\n                : (\r\n                  <a href={source} className=\"btn btn-special mb-3 btn-with-icon\">\r\n                    <Github className=\"btn__icon\" width=\"20\" height=\"20\" /> Source Code\r\n                  </a>\r\n                )\r\n            }\r\n          </div>\r\n        </div>\r\n      </Content>\r\n    </Layout >\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`query {\r\n  site {\r\n    siteMetadata {\r\n      siteUrl\r\n    }\r\n  }\r\n}`;\r\n\r\nexport default Work;\r\n"],"sourceRoot":""}